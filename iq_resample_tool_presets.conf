# -----------------------------------------------------------------------------
# Preset Configuration File for the I/Q Resampling Tool
# -----------------------------------------------------------------------------
#
# HOW TO USE THIS FILE:
#
# 1. This file allows you to define custom presets for common resampling tasks.
# 2. To define a new preset, create a new section like [preset:your-preset-name].
#    The 'your-preset-name' is what you will use with the --preset option.
# 3. Inside each section, add key = value pairs to define the preset's behavior.
# 4. Lines starting with '#' or ';' are comments and are ignored.
# 5. The program will look for this file in its current directory at startup.
#
# --- AVAILABLE KEYS ---
#
# description          = (Required) A short, one-line description of the preset.
#                        This text is shown when you run the program with --help.
#
# target_rate          = (Required) The final output sample rate in Hz.
#                        You can use scientific notation (e.g., 2.4e6 for 2.4 MHz).
#
# sample_format_name   = (Required) The output sample format.
#
#                        For 'raw' output, the following formats are supported:
#                          cu8      : Unsigned 8-bit complex I/Q
#                          cs8      : Signed 8-bit complex I/Q
#                          cs16     : Signed 16-bit complex I/Q
#                          cu16     : Unsigned 16-bit complex I/Q
#                          sc16q11  : 16-bit Signed Complex Q4.11 I/O
#                          cs32     : Signed 32-bit complex I/Q
#                          cu32     : Unsigned 32-bit complex I/Q
#                          cf32     : 32-bit float complex I/Q
#
#                        IMPORTANT: For 'wav' or 'wav-rf64' output, you MUST use
#                        either 'cs16' or 'cu8'. Other formats are not supported.
#
# output_type          = (Required) The output container format. Must be one of:
#                          raw      : Headerless I/Q data, for piping to other tools.
#                          wav      : Standard WAV file (max 4GB).
#                          wav-rf64 : RF64/BW64 WAV file for large recordings.
#
# gain                 = (Optional) A software gain multiplier applied after normalization.
#                        The default is 1.0. This is very useful for boosting the
#                        signal level to use the full dynamic range of low-bit-depth
#                        formats like 'cu8'. A value of 5.0 is a good starting point.
#
# dc_block             = (Optional) Enables a high-pass filter to remove any DC offset
#                        from the center of the spectrum. Use 'true' or 'false'.
#                        Defaults to false if omitted.
#
# iq_correction        = (Optional) Enables automatic I/Q imbalance correction. This can
#                        significantly improve signal quality by reducing the mirror image.
#                        Use 'true' or 'false'. Defaults to false if omitted.
#                        For best results, this requires 'dc_block = true'.
#
# lowpass              = (Optional) Apply a low-pass filter, keeping frequencies from the
#                        center (DC) out to the specified cutoff frequency. Ideal for
#                        isolating a single signal at the center of the spectrum.
#                        e.g., 'lowpass = 100e3' keeps everything from -100 kHz to +100 kHz.
#
# highpass             = (Optional) Apply a high-pass filter, rejecting frequencies near
#                        the center (DC) and keeping everything *above* the cutoff.
#                        Useful for removing strong DC spikes or low-frequency interference.
#                        e.g., 'highpass = 10e3' rejects the band from -10 kHz to +10 kHz.
#
# pass_range           = (Optional) Isolate a specific band of frequencies using a 'start:end'
#                        format. Perfect for extracting an off-center signal of interest.
#                        e.g., 'pass_range = -200e3:-100e3' isolates the 100 kHz of
#                        spectrum to the left of the center frequency.
#
# stopband             = (Optional) Apply a stop-band (notch) filter to remove a specific
#                        range of frequencies, using the same 'start:end' format. Excellent
#                        for eliminating a known source of interference.
#                        e.g., 'stopband = -50e3:50e3' creates a 100 kHz notch at DC.
#
# transition_width     = (Optional) Defines the 'sharpness' of the filter by specifying
#                        the width of the transition region between passband and stopband
#                        in Hz. A smaller value results in a sharper, higher-quality, but
#                        more CPU-intensive filter. This is the recommended way to control
#                        filter quality and is mutually exclusive with 'filter_taps'.
#
# filter_taps          = (Optional) An advanced option to directly control the filter's
#                        complexity by setting the exact number of FIR taps (coefficients).
#                        This overrides 'transition_width' and the automatic calculation.
#
# attenuation          = (Optional) Sets the desired stop-band attenuation in decibels (dB).
#                        This controls how much the filter rejects unwanted signals. Higher
#                        values mean better rejection but require a more complex filter.
#                        Defaults to 60 dB if omitted.
#
# filter_type          = (Optional) An advanced option to manually select the filter
#                        implementation algorithm. Can be 'fir' or 'fft'. Defaults to 'auto',
#                        which is the recommended setting. The tool will automatically choose
#                        the most efficient method for the requested filter.
#
# -----------------------------------------------------------------------------
#
# --- EXAMPLE 1: Isolate a standard WFM broadcast station ---
#
# This preset takes a wideband capture (e.g., 2.4 Msps from an RTL-SDR) and
# isolates a single 200 kHz wide FM station at the center, then resamples it
# to a rate suitable for a software WFM demodulator.

; [preset:wfm-isolate]
; description = Isolates a 200kHz WFM signal and resamples to 240ksps.
; target_rate = 240000
; sample_format_name = cs16
; output_type = raw
; dc_block = true
; iq_correction = true
; # Create a low-pass filter to keep the 200 kHz signal (-100k to +100k)
; lowpass = 100e3
; # Use a reasonably sharp transition to reject adjacent stations
; transition_width = 25e3
; attenuation = 70


# --- EXAMPLE 2: Remove strong central interference ---
#
# This preset demonstrates how to use a stop-band (notch) filter to remove
# a strong, narrow carrier or interference located at the DC center of a capture.
# This can help reveal weaker signals that were being overpowered.

; [preset:notch-center]
; description = Removes a 10kHz band of interference around the DC center.
; target_rate = 1000000
; sample_format_name = cs16
; output_type = raw
; iq_correction = true
; # Note: dc_block is set to false because the notch filter is already
; # removing the DC component, making the dedicated DC blocker redundant.
; dc_block = false
; # Create a very sharp notch filter from -5 kHz to +5 kHz
; stopband = -5e3:5e3
; transition_width = 1e3


# --- EXAMPLE 3: Extract an off-center NOAA weather signal ---
#
# This preset shows how to use a pass-range filter to extract a narrow signal
# that is NOT at the center of the capture. Here, we imagine our SDR is tuned
# such that a 15 kHz wide NOAA signal is centered at +150 kHz from DC.

; [preset:noaa-extract]
; description = Extracts a 15kHz NOAA weather channel and resamples to 24ksps.
; target_rate = 24000
; sample_format_name = cs16
; output_type = raw
; dc_block = true
; iq_correction = true
; # Isolate the 15 kHz wide signal centered at +150 kHz.
; # The range is from 142.5 kHz to 157.5 kHz.
; pass_range = 142.5e3:157.5e3
; # Use a sharp transition to avoid bleed from other channels
; transition_width = 4e3

# Presets below this line are enabled and will be available to the program.

[preset:cu8-nrsc5]
description = Sets sample type to cu8, rate to 1488375.0 Hz for FM/AM NRSC5 decoding (produces headerless raw output).
target_rate = 1488375.0
sample_format_name = cu8
output_type = raw
dc_block = false
iq_correction = false

[preset:cs16-fm-nrsc5]
description = Sets sample type to cs16, rate to 744187.5 Hz for FM NRSC5 decoding (produces headerless raw output).
target_rate = 744187.5
sample_format_name = cs16
output_type = raw
dc_block = false
iq_correction = false

[preset:cs16-am-nrsc5]
description = Sets sample type to cs16, rate to 46511.71875 Hz for AM NRSC5 decoding (produces headerless raw output).
target_rate = 46511.71875
sample_format_name = cs16
output_type = raw
dc_block = false
iq_correction = false
